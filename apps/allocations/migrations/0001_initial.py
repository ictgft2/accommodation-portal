# Generated by Django 4.2.24 on 2025-09-12 10:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('buildings', '0001_initial'),
        ('service_units', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoomAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation_type', models.CharField(choices=[('ServiceUnit', 'Service Unit'), ('Pastor', 'Pastor'), ('Member', 'Member')], help_text='Type of allocation: ServiceUnit, Pastor, or Member', max_length=30)),
                ('allocation_date', models.DateTimeField(auto_now_add=True, help_text='When this allocation was made')),
                ('notes', models.TextField(blank=True, help_text='Optional notes about the allocation')),
                ('start_date', models.DateField(blank=True, help_text='When the allocation starts (optional)', null=True)),
                ('end_date', models.DateField(blank=True, help_text='When the allocation ends (optional)', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this allocation is currently active')),
                ('allocated_by', models.ForeignKey(help_text='User who made this allocation', limit_choices_to={'role__in': ['SuperAdmin', 'ServiceUnitAdmin']}, on_delete=django.db.models.deletion.PROTECT, related_name='allocations_made', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(help_text='Room being allocated', on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='buildings.room')),
                ('service_unit', models.ForeignKey(blank=True, help_text='Service unit receiving the room allocation (null for individual allocations)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room_allocations', to='service_units.serviceunit')),
                ('user', models.ForeignKey(blank=True, help_text='User receiving the room allocation (null for service unit allocations)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room_allocations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Room Allocation',
                'verbose_name_plural': 'Room Allocations',
                'db_table': 'room_allocations',
                'ordering': ['-allocation_date'],
            },
        ),
        migrations.CreateModel(
            name='AllocationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_reason', models.TextField(help_text='Reason for the room allocation request')),
                ('requested_start_date', models.DateField(blank=True, help_text='Requested start date for allocation', null=True)),
                ('requested_end_date', models.DateField(blank=True, help_text='Requested end date for allocation', null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Cancelled', 'Cancelled')], default='Pending', help_text='Status of the allocation request', max_length=20)),
                ('review_notes', models.TextField(blank=True, help_text='Notes from the reviewer')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When this request was reviewed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this request was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this request was last updated')),
                ('created_allocation', models.ForeignKey(blank=True, help_text='Allocation created from this request (if approved)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_request', to='allocations.roomallocation')),
                ('preferred_building', models.ForeignKey(blank=True, help_text='Preferred building (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allocation_requests', to='buildings.building')),
                ('preferred_room', models.ForeignKey(blank=True, help_text='Preferred room (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allocation_requests', to='buildings.room')),
                ('requested_by', models.ForeignKey(help_text='User requesting the allocation', on_delete=django.db.models.deletion.CASCADE, related_name='allocation_requests', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocation_requests_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Allocation Request',
                'verbose_name_plural': 'Allocation Requests',
                'db_table': 'allocation_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='roomallocation',
            index=models.Index(fields=['room'], name='idx_allocations_room'),
        ),
        migrations.AddIndex(
            model_name='roomallocation',
            index=models.Index(fields=['user'], name='idx_allocations_user'),
        ),
        migrations.AddIndex(
            model_name='roomallocation',
            index=models.Index(fields=['service_unit'], name='idx_allocations_service_unit'),
        ),
        migrations.AddIndex(
            model_name='roomallocation',
            index=models.Index(fields=['allocation_type'], name='idx_allocations_type'),
        ),
        migrations.AddIndex(
            model_name='roomallocation',
            index=models.Index(fields=['allocated_by'], name='idx_allocations_allocated_by'),
        ),
        migrations.AddIndex(
            model_name='roomallocation',
            index=models.Index(fields=['is_active'], name='idx_allocations_active'),
        ),
    ]
